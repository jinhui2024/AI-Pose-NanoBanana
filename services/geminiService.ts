import { GoogleGenAI, Modality } from "@google/genai";

// Ensure the API key is available, but do not hardcode it.
// It is expected to be set in the environment variables.
if (!process.env.API_KEY) {
  throw new Error("API_KEY environment variable not set.");
}
const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const dataUrlToPart = (dataUrl: string) => {
  const [header, data] = dataUrl.split(',');
  if (!header || !data) {
    throw new Error("Invalid data URL format");
  }
  const mimeType = header.match(/:(.*?);/)?.[1] ?? 'image/png';
  return {
    inlineData: {
      data,
      mimeType,
    },
  };
};

export const generateImageFromPose = async (baseImage: string, poseImage: string): Promise<string> => {
  const model = 'gemini-2.5-flash-image-preview';
  const prompt = `You are an expert image editor. Look at the first image which contains a person. Look at the second image which contains a simple stick-figure drawing of a pose. Your task is to generate a new image where the person from the first image is performing the exact pose shown in the second image. The background, art style, and person's appearance should be preserved as much as possible from the original image.`;

  try {
    const response = await ai.models.generateContent({
      model: model,
      contents: {
        parts: [
          dataUrlToPart(baseImage),
          dataUrlToPart(poseImage),
          { text: prompt },
        ],
      },
      config: {
        responseModalities: [Modality.IMAGE, Modality.TEXT],
      },
    });
    
    const imagePart = response.candidates?.[0]?.content?.parts.find(part => part.inlineData);

    if (imagePart && imagePart.inlineData) {
      const base64ImageBytes = imagePart.inlineData.data;
      const mimeType = imagePart.inlineData.mimeType;
      return `data:${mimeType};base64,${base64ImageBytes}`;
    } else {
      const textPart = response.candidates?.[0]?.content?.parts.find(part => part.text);
      if (textPart?.text) {
        throw new Error(`Model returned text instead of an image: ${textPart.text}`);
      }
      throw new Error("No image was generated by the model. The response may have been blocked or contained no valid content.");
    }
  } catch (e) {
    console.error("Error generating image:", e);
    const errorMessage = e instanceof Error ? e.message : String(e);
    // Add a more user-friendly message for common API errors.
    if (errorMessage.includes('400') || errorMessage.includes('API key not valid')) {
        throw new Error('Failed to generate image due to an invalid request or API key issue. Please check your setup.');
    }
    throw new Error(`Failed to generate image: ${errorMessage}`);
  }
};
